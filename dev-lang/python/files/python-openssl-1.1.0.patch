--- a/Modules/_ssl.c.old	2018-04-29 23:47:33.000000000 +0100
+++ b/Modules/_ssl.c	2018-07-15 00:03:10.320760162 +0100
@@ -74,6 +74,7 @@
 #include "openssl/ssl.h"
 #include "openssl/err.h"
 #include "openssl/rand.h"
+#include "openssl/dh.h"
 
 /* SSL error object */
 static PyObject *PySSLErrorObject;
@@ -1027,8 +1028,14 @@
                     goto fail;
                 }
                 PyTuple_SET_ITEM(t, 0, v);
+		
+#ifndef PY_OPENSSL_1_1_API
                 v = PyString_FromStringAndSize((char *)ASN1_STRING_data(as),
                                                ASN1_STRING_length(as));
+#else
+                v = PyString_FromStringAndSize((char *)ASN1_STRING_get0_data(as),
+                                               ASN1_STRING_length(as));
+#endif
                 if (v == NULL) {
                     Py_DECREF(t);
                     goto fail;
@@ -1270,7 +1277,11 @@
     ASN1_INTEGER *serialNumber;
     char buf[2048];
     int len, result;
+#ifndef PY_OPENSSL_1_1_API
     ASN1_TIME *notBefore, *notAfter;
+#else
+    const ASN1_TIME *notBefore, *notAfter;
+#endif    
     PyObject *pnotBefore, *pnotAfter;
 
     retval = PyDict_New();
@@ -1328,7 +1339,11 @@
     Py_DECREF(sn_obj);
 
     (void) BIO_reset(biobuf);
+#ifndef PY_OPENSSL_1_1_API
     notBefore = X509_get_notBefore(certificate);
+#else
+    notBefore = X509_get0_notBefore(certificate);
+#endif
     ASN1_TIME_print(biobuf, notBefore);
     len = BIO_gets(biobuf, buf, sizeof(buf)-1);
     if (len < 0) {
@@ -1345,7 +1360,11 @@
     Py_DECREF(pnotBefore);
 
     (void) BIO_reset(biobuf);
+#ifndef PY_OPENSSL_1_1_API
     notAfter = X509_get_notAfter(certificate);
+#else
+    notAfter = X509_get0_notAfter(certificate);
+#endif
     ASN1_TIME_print(biobuf, notAfter);
     len = BIO_gets(biobuf, buf, sizeof(buf)-1);
     if (len < 0) {
@@ -2183,6 +2202,7 @@
         return NULL;
 
     PySSL_BEGIN_ALLOW_THREADS
+#ifndef PY_OPENSSL_1_1_API
     if (proto_version == PY_SSL_VERSION_TLS1)
         ctx = SSL_CTX_new(TLSv1_method());
 #if HAVE_TLSv1_2
@@ -2201,6 +2221,26 @@
 #endif
     else if (proto_version == PY_SSL_VERSION_TLS)
         ctx = SSL_CTX_new(TLS_method());
+#else
+    ctx = SSL_CTX_new(TLS_method());
+    if (proto_version == PY_SSL_VERSION_TLS1)
+        SSL_CTX_set_max_proto_version(ctx, TLS1_VERSION);
+#if HAVE_TLSv1_2
+    else if (proto_version == PY_SSL_VERSION_TLS1_1)
+        SSL_CTX_set_max_proto_version(ctx, TLS1_1_VERSION);
+    else if (proto_version == PY_SSL_VERSION_TLS1_2)
+        SSL_CTX_set_max_proto_version(ctx, TLS1_2_VERSION);
+#endif
+#ifndef OPENSSL_NO_SSL3
+    else if (proto_version == PY_SSL_VERSION_SSL3)
+        SSL_CTX_set_max_proto_version(ctx, SSL3_VERSION);
+#endif
+#ifndef OPENSSL_NO_SSL2
+    // OpenSSL 1.1.0 has no SSLv2
+    else if (proto_version == PY_SSL_VERSION_SSL2)
+        proto_version = -1;
+#endif
+#endif  
     else
         proto_version = -1;
     PySSL_END_ALLOW_THREADS
@@ -4472,7 +4512,11 @@
     /* SSLeay() gives us the version of the library linked against,
        which could be different from the headers version.
     */
+#ifndef PY_OPENSSL_1_1_API
     libver = SSLeay();
+#else
+    libver = OpenSSL_version_num();
+#endif
     r = PyLong_FromUnsignedLong(libver);
     if (r == NULL)
         return;
@@ -4482,7 +4526,11 @@
     r = Py_BuildValue("IIIII", major, minor, fix, patch, status);
     if (r == NULL || PyModule_AddObject(m, "OPENSSL_VERSION_INFO", r))
         return;
+#ifndef PY_OPENSSL_1_1_API
     r = PyString_FromString(SSLeay_version(SSLEAY_VERSION));
+#else
+    r = PyString_FromString(OpenSSL_version(OPENSSL_VERSION));
+#endif
     if (r == NULL || PyModule_AddObject(m, "OPENSSL_VERSION", r))
         return;
 
--- a/Modules/_hashopenssl.c.old	2018-04-29 23:47:33.000000000 +0100
+++ b/Modules/_hashopenssl.c	2018-07-15 00:00:37.507130798 +0100
@@ -56,7 +56,12 @@
 #define _OPENSSL_SUPPORTS_SHA2
 #endif
 
-#if (OPENSSL_VERSION_NUMBER < 0x10100000L) || defined(LIBRESSL_VERSION_NUMBER)
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000L) && !defined(LIBRESSL_VERSION_NUMBER)
+#  define OPENSSL_VERSION_1_1 1
+#  define PY_OPENSSL_1_1_API 1
+#endif
+
+#ifndef OPENSSL_VERSION_1_1
 /* OpenSSL < 1.1.0 */
 #define EVP_MD_CTX_new EVP_MD_CTX_create
 #define EVP_MD_CTX_free EVP_MD_CTX_destroy
